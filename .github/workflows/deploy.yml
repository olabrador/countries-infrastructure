name: Deploy CDK Stack

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Bootstrap CDK
        run: cdk bootstrap

      - name: Deploy CDK stack
        run: cdk deploy --require-approval never

  migration:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get Migration Lambda Function name
        id: get-lambda-function-name
        run: |
          echo "::set-output name=lambda-function-name::$(aws cloudformation describe-stacks --stack-name CountriesInfrastructureStack --query "Stacks[0].Outputs[?OutputKey=='MigrationFunctionName'].OutputValue" --output text)"

      - name: Invoke Lambda function
        run: |
          result=$(aws lambda invoke --function-name ${{ steps.get-lambda-function-name.outputs.lambda-function-name }} /dev/stdout)
          echo "$result"
          lambdaResponse=$(echo "$result" | jq -r '.[0]')
          statusCode=$(echo "$lambdaResponse" | jq -r '.statusCode')
          if [[ $statusCode -ne 200 ]]; then exit 1; fi
